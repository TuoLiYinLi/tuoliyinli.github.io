<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>20221202博客测试</title>
    <link href="/2022/12/02/20221202%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/"/>
    <url>/2022/12/02/20221202%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="条目更新1">条目更新1</h1>]]></content>
    
    
    <categories>
      
      <category>默认分类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>默认标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>霓虹攀升——游戏设计</title>
    <link href="/2022/07/08/%E9%9C%93%E8%99%B9%E6%94%80%E5%8D%87-%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/07/08/%E9%9C%93%E8%99%B9%E6%94%80%E5%8D%87-%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>全文分为两部分，第一部分谈论游戏霓虹攀升的灵感起点、设计准则，展示游戏设计制作理念；第二部分补充我对游戏组成部分的理解。</p>          </div><h1 id="霓虹攀升-neon-ascending">霓虹攀升 Neon Ascending</h1><iframe src="https://itch.io/embed/1558012?linkback=true&amp;border_width=0&amp;bg_color=1b2d42&amp;fg_color=ffffff&amp;link_color=0073ef&amp;border_color=afbfd2" width="550" height="165" frameborder="0"><a href="https://tuoliyinli.itch.io/neon-ascending">霓虹攀升 NeonAscending by TuoLiYinLi</a></iframe><h2 id="核心">1.核心</h2><p><strong>我发现了一个规律：人类骨子里谋求一种增长之上的增长。</strong><br />比如钱生钱，资本的聚集。比如聪明人发明机器人来帮自己干活，又有人发明能创造机器人的机器。我们学习知识，然后又强调学习的最高境界是去学习这种学习行为本身。人们把一件事做完，就想到让它更快地做完、自动地做完。这样的例子简直贯穿了人性，人类会不断追逐这样的超越过程。<br />所以，我从这个点出发：<strong>一个能让玩家不断地获取实力增长的游戏</strong>。</p><blockquote><p>成长的速度也会成长，而成长速度的成长的速度也会成长，而……（好吧）</p></blockquote><p>这个核心是符合人类本质的，对于喜爱上述这种“增长”的人来说都是好玩的。</p><p>在游戏中最类似的情况是什么呢？答案是<strong>叠Buff</strong>。</p><blockquote><p>简单总结为一个公式：<br /><span class="math display">\[T=(1+A)*(1+B)*(1+C)*(1+D)...\]</span></p></blockquote><p>从意义上来说，它对应着人类一层又一层的努力，换来丰硕成果的情况。提升一个个Buff就等效于提升这些因子，最终结果将会无比巨大。<br />从公式形式上来说，与叠Buff的游戏计算方法也颇为相似。</p><h2 id="形式">2.形式</h2><p>在这个内核之上，可以设计出什么样的形式呢？这里首先要侧重于<strong>逻辑形式</strong>，然后是程序，最后是美术。</p><h3 id="基本原型">2.1.基本原型</h3><p>优先在各种方案中选择框架清晰的、易于实现的、可以扩展的、有先例可鉴的。<br />推敲过程包括从现有游戏中提炼和修改并形成自己的方案，还可以发挥想象力，创造一些新奇和独特之处。<br />经过思考，我提出一个游戏原型，并且将从空间上、时间上等方面说明它的性质。</p><blockquote><p><strong>原型一</strong></p><ul><li>整个场景是一个二维方形网格棋盘</li><li>每个网格允许向其中放置属于玩家的方块，从而发挥不同的效果，比如刚才说到的武器可以进行攻击，其它的则可以提高这些武器的效果。</li><li>时间是连续的，敌人会源源不断地涌来，武器会自动地攻击靠近的敌人。</li><li>在击败一定数量的敌人后，玩家获得升级，可以添加方块来提高自己的实力。</li><li>如果敌人摧毁了玩家的所有方块，那么游戏结束。</li></ul></blockquote><p>这些听起来有点意思了，接下来可以细化这些规则，如有多少个网格，有哪些武器以及可以提高的属性？有什么样的敌人？如何升级？</p><p>首先，我认为武器可以看作是不同属性的组合产物，所以要先确定可用的属性有哪些：<br />最关键的问题：子弹的攻击力、暴击率、暴击伤害、攻击速度<br />不那么关键但是可以起到特殊作用：子弹的速度、体积、视野范围<br />一些加戏的特效：燃烧效果、冰冻效果</p><p>那么，武器可以有高攻击力、低射速的闪电；有高射速的机枪；有视野很大，攻击很准的武器；有能穿透大量敌人的切割武器……</p><p>理论上，敌人也要有与之相对应的特点，但是不妨设计得简单点：<br />敌人属性：移动速度，攻击力，血量。<br />敌人的血量会越来越高，数量会变化，这是最直观的，一定程度上可以替代许多花哨的设计。</p><blockquote><p>当然，把敌人设计得简单还有一个重要作用就是简化复杂性，控制开发成本</p></blockquote><p>由于方块不能移动，敌人的进攻行为可以简化为近距离接触造成伤害。敌人的远程攻击其实也可以看作是等效的由较大体积、更快速度的敌人进行的近距离攻击。<br />敌人从四面八方包围玩家会更加困难，因为能同时接近玩家的敌人数量增加了。四面八方的包围与从一个角度突破本质上是一样的，不过是放置一圈防御塔和放一排防御塔的区别。<br />玩家选择方块并提升实力的过程非常有rogue-like的感觉，也很匹配叠Buff的初衷，可以从类似的游戏中借鉴提取。</p><blockquote><p><strong>原型二</strong></p><ul><li>整个场景是一个二维方形网格棋盘，长宽为15x61。</li><li>每个网格允许向其中放置属于玩家的方块，从而发挥不同的效果。武器和Buff如上。</li><li>时间是连续的，敌人会源源不断地从上方涌来，武器会自动地攻击靠近的敌人。</li><li>敌人会对碰到的方块造成伤害并摧毁它们。</li><li>如果敌人摧毁了玩家的所有方块，那么游戏结束。</li><li>游戏按波次进行，每一波一定数量的敌人，玩家成功击败一波敌人后随机抽取若干个方块，选择其中的一个进行放置。</li></ul></blockquote><p><strong>现在逻辑形式已经基本敲定，再来探讨一些更具体的方块设计和数值的安排。</strong>对应每一种Buff至少可以设置一种Buff方块，提供视野、射速、攻击力、暴击率等等。<br />针对游戏的机制也可以设计一些效果，比如重新抽取模块、更多供选择模块的槽位、每回合结束可以放置更多的模块。<br />对于武器本身的特点也可以设计增益效果，比如穿透武器对越远的敌人造成越多的伤害，比如闪电可以连锁攻击敌人，比如机枪可以获得额外的射速提升……<br />不局限于添加新的效果和武器来横向增加内容，考虑纵向提高深度，对已有元素进行组合与变化也会很有趣，比如添加一个随着重新抽取模块次数而不断增加攻击力的方块，或者一个特殊效果，使被冰冻的敌人有概率即死……</p><p>以上这些规则都是在原型二的基础上延申出来的。我认为，一个好的原型特点之一是不仅能让我们理解它的基本规则，还有比较统一的路径来丰富它，从而使这个体系不易变形而又有活力。</p><blockquote><p>例如：</p><ul><li>弹药：使同一列上方所有模块获得+n攻击力。</li><li>齿轮：使斜角方向上所有模块获得+w%攻击速度。</li><li>核弹：被破坏时爆炸，对敌人造成大量伤害。</li><li>护甲：拥有额外的生命值，可以抵御敌人更久。</li><li>超级闪电：每当闪电武器杀死敌人时提升闪电武器的攻击力，有累积上限。</li><li>燃烧：当武器击中敌人时，敌人会开始燃烧并持续受到伤害。</li><li>冰点：当被冰冻的敌人受到伤害时有概率即死。</li><li>维护站：玩家的失误和强迫症必然会出现，给予他们调整和矫正的能力可以使游戏更友好。这个方块允许玩家去即时地交换方块的位置。</li><li>进步者：模仿一个武器并发射它将发射的子弹，并且继承那个武器的所有Buff。</li></ul></blockquote><h3 id="数值">2.2.数值</h3><p><strong>不同的Buff和效果之间相辅相成，而可以部署的方块是有限的，这就产生权衡各个Buff的问题。</strong><br />一方面玩家可以尝试为特定的武器提供非常强力的Buff，精细地培养一个武器，另一方面也可以放置更多的武器，使一个Buff能够被充分地利用。当然，游戏中还有更复杂的因素如方块出现的概率、地图的大小等等，这些限制着各种方案。这些关于权衡的问题往往难以把握，是游玩和设计的难点。</p><blockquote><p>伤害与武器数量的简单权衡： <span class="math display">\[D = N*(A_1+A_2*M)\]</span>N为武器数量，A1为武器基本攻击力，A2为Buff加成效果，M为Buff方块数量。</p></blockquote><p>同样地，多个Buff之间也需要权衡来达到最优化。</p><blockquote><p>总伤害与攻击力、暴击率、暴击倍数、冰冻效果、攻击速度、武器视野之间的关系：<span class="math display">\[Dmg = Spd*Atk*(1+Cri)*T\]</span> <span class="math display">\[Cri = 1+Cri_d*Cri_c (Cri_c &lt;= 1)\]</span> <span class="math display">\[T = Dist/(V*Frz)\]</span>Dmg为武器攻击对单个敌人造成的总伤害，T为这个敌人靠近玩家的方块所需时间，Cri为暴击提升倍数，Cri-d是暴击伤害，Cri-c是暴击概率，Atk是炮塔的基本攻击力，Spd是武器攻击速度，Dist是视野距离，V是敌人速度，Frz是冰冻减速效果。</p></blockquote><p>先前对敌人数值使用了比较简单的设计，敌人强度主要体现在体积、速度、攻击力、生命值上。简单来说，随波次增加，敌人的总生命值和平均生命值将越来越高，对玩家形成越来越大的压力。相比于方块的设计更加简单直观。</p><h3 id="对流程的设计">2.3.对流程的设计</h3><p><strong>对于这个游戏来说，最主要的流程体验就是游戏的难度，即敌人强度随波次的变化情况。</strong><br />目标是设计一个较好的难度坡度（难度曲线），这涉及两方面，玩家的强度，敌人的强度。首先一个好的难度曲线应该是“易上手，难精通”，即开始较简单，中间有尝试的机会，最后要面对极限的挑战。所以流程可以分割为三个阶段，首先是简单，然后是一个攀升阶段，给予一个难度平坦区域，让玩家试一试、爽一爽，最后迎来疯狂的考验。</p><figure><img src="https://s1.ax1x.com/2022/07/10/js68tP.png"alt="难度-波次示意图" /><figcaption aria-hidden="true">难度-波次示意图</figcaption></figure><h3 id="附加的内容">2.4.附加的内容</h3><p>围绕游戏的主体设计一些附加增色的项目，如商店升级、排行榜甚至一些彩蛋。</p><h3 id="程序逻辑">2.5.程序逻辑</h3><p>此游戏使用Godot 3.4.4开发，使用一种非常类似于Python的脚本语言GDScript。Godot与Unity3D也有许多相似之处。&gt; GDScript太好用了！</p><p><strong>不论什么引擎，都需要清晰的程序逻辑。在此不讨论具体的代码，而是说明游戏的程序结构。</strong></p><p>游戏中有三大基本要素：方块、敌人、子弹</p><p>敌人共有基本属性如生命值、攻击力、移动速度、大小，且共有一些基本的方法（函数），如死亡，攻击，被击中时变色等等。</p><p>子弹类的基本属性正是前面设计的若干个Buff，即攻击力、暴击率、暴击倍数、飞行速度等等。子弹并没有本质的差别，只是基本属性和外观不同而已。</p><p>方块是最为复杂的，它不仅按照位置条件和周围的方块产生互动，而且有的可以主动攻击，有的受玩家控制激活。为了实现这个功能，首先令所有方块都有一些基本的共同点，即可以放置、破坏等等，可以预留一些虚函数在基类中，以响应玩家的点击事件，然后在具体的方块内再实现它，就可以做到不同方块对点击有不同的响应，其它功能同理。另外，出于优化和便于管理的考虑，又在方块之下抽象出武器类，它们共有类似的寻找敌人的逻辑，以及可以被赋予Buff的效果。所有具体的炮塔武器都继承自武器类。</p><figure><img src="https://s1.ax1x.com/2022/07/10/jsf2jK.jpg"alt="游戏对象继承关系" /><figcaption aria-hidden="true">游戏对象继承关系</figcaption></figure><figure><img src="https://s1.ax1x.com/2022/07/10/js4hYd.jpg" alt="方块类代码" /><figcaption aria-hidden="true">方块类代码</figcaption></figure><h3 id="美术">2.6.美术</h3><p>美术应该来源于游戏的故事，从策划的角度来说，这个游戏的故事背景非常灵活，很多题材都适合它，比如僵尸、机甲、可爱小动物等等。我选择了一个我认为比较能被大部分人接受的霓虹电子风格（而且好制作）。</p><p>美术需要一些才气和灵感，再加上一点点技术可以达成一些美妙的结果。我主要是凭借自己的感受来设计形象的，用到了着色器来增加噪声和动态，以及内置的后处理效果来创造闪闪发光的霓虹风格。</p><figure><img src="https://s1.ax1x.com/2022/07/09/jrprQS.png" alt="主界面" /><figcaption aria-hidden="true">主界面</figcaption></figure><p>每个方块就像一个个精致的图标一样，怎么摆放都不会难看。</p><figure><img src="https://s1.ax1x.com/2022/07/09/jrpJqH.png" alt="游戏画面" /><figcaption aria-hidden="true">游戏画面</figcaption></figure><h1 id="小理论游戏组成">小理论：游戏组成</h1><h2 id="内核">1.内核</h2><p>一个没有玩法内核的游戏往往没人会玩第二遍，一个没有精神内核的游戏无法打动玩家。两个都没有就算不上是游戏。</p><h2 id="形式-1">2.形式</h2><p>形式是对内核的实现。内核是骨头，形式是肉。</p><p>我简单地把形式分为逻辑形式、线性流程、表现形式三个部分</p><h3 id="逻辑形式">2.1.逻辑形式</h3><p>所谓逻辑形式就是指构成游戏性的那些基本规则。&gt;如斗地主要求值大的牌胜过值小的；玩家定时要吃东西否则会饿死；当球被踢进球门，进攻方取地分数。</p><p>另外，玩法规则对于不同游戏的意义是不一样的：</p><blockquote><ul><li>文字冒险游戏极大地削弱了游戏性，而重视其它方面，玩法规则就是点击屏幕而已。</li><li>冒险游戏、平台跳跃游戏需要玩家躲避怪物，解开谜题，游戏性较高。</li><li>沙盒游戏中各种规则都与各个独立的元素有关，不同的物体和道具呈现不同效果，玩法丰富复杂。</li></ul></blockquote><p>从提到的最复杂的沙盒游戏来进行分析，可以发现游戏最完善的形态就是对现实的模拟和超越（完成了模拟就已经实现了超越），但是从技术上来说，我们很难利用游戏超越时间和空间的逻辑。即便游戏的内容纵横古今，从城堡到太空，其呈现的时间和空间的逻辑也无外乎几种。</p><h4 id="空间性质">2.1.1.空间性质</h4><p>连续空间是最拟合现实的，可以分为二维和三维。二维又可以分为俯视和横板卷轴等等。有的游戏看似是三维，具有一定的高低差，但是人物却不能跳也不能遁地；有的游戏看似是二维却有深度的切换和不同场景的传送切换。</p><p>网格空间是一种更抽象、更符合人类思维的设计。网格往往也是二维的。网格空间的游戏在规则上往往更加复杂，棋类就是一个好例子。</p><p>网格空间还可以衍生为点与线组成的网络，这是一种图结构，也有基于此的游戏。</p><h4 id="时间性质">2.1.2.时间性质</h4><p>连续时间是最拟合现实的，应用广泛。另一种是回合制，看起来简单，但是回合制的游戏往往会花更多精力来设计玩法规则，一旦与棋牌结合，就会变得无比深邃。</p><h4 id="其它">2.1.3.其它</h4><p>每个游戏都拥有许多独特的规则以实现其独特的核心，并由此变得复杂、丰富而有趣。</p><blockquote><ul><li>吃鸡：枪战、苟到最后</li><li>杀戮尖塔：牌组构建</li><li>我的世界：创造一切</li><li>Mindustry：流水线、经营、塔防</li><li>星露谷：代入感、经营养成</li><li>黑魂：时机、技巧、黑暗奇幻</li><li>辐射四：一个废土世界、自由的探索</li><li>奇异人生：穿越时空的友谊故事</li><li>……</li></ul></blockquote><p>阻止玩家做出意外之举或者说屏蔽一些清奇的思路是应该被重视的。玩家在餐桌上蹲起、跑到地图之外甚至开挂，都是需要思考的。同时用过于明显和强硬的手段控制玩家是不友好的。比如放太多明显的空气墙，设置不可击败的boss，会令人感到不平。</p><h3 id="线性流程">2.2.线性流程</h3><p>不管是什么游戏最后营造的体验都可以说是线性的，因为玩家的时间只会向未来流动，即便游戏设计有多条可能的分支，玩家最终也只能选择某一条路径。</p><h4 id="故事性的">2.2.1.故事性的</h4><p>强调故事性的游戏就像是一部可以互动的小说、电影，主要由故事内容支撑起来，游戏的内核转移到故事的内核。其中穿插的解密、冒险等游戏性元素将在故事之上增加它的趣味。</p><h4 id="规则性的">2.2.2.规则性的</h4><p>强调规则性的游戏更加开门见山，就像篮球比赛和五子棋一样，玩家学习规则然后投入到一些关卡和比赛中去。这一部分强调游戏规则带来的乐趣，在规则上创造出方法和战术，在规则下锻炼快速的反应和准确的记忆力。</p><h4 id="二者兼备的">2.2.3.二者兼备的</h4><p>故事性并不与玩法相抵触，但制作游戏往往是有所侧重的，做到故事性与玩法兼顾需要更高的成本。比如开放世界游戏角色扮演游戏，有丰富的人物故事，多种结局，还有一系列考验玩家实力的系统。</p><h3 id="表现形式">2.3.表现形式</h3><p>现阶段，游戏最终要以图像和声音作为媒介。如果哪一天嗅觉、味觉、触觉被标准化必定会被应用到游戏中。</p><h4 id="视觉呈现">2.3.1.视觉呈现</h4><h4 id="听觉呈现">2.3.2.听觉呈现</h4><h4 id="风格">2.3.3.风格</h4><p>不论是什么样的视觉和听觉传达，最终要达到和谐，并且往往可以用某一种风格来归类它们。如，清新的，血腥的，柔弱的，仇恨的，幽默的，复杂而严谨的，爽快而刺激的。风格也应当搭配游戏的逻辑形式和线性流程，否则就会显得割裂和错乱。</p>]]></content>
    
    
    <categories>
      
      <category>作品集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模块化的古树侦察保护概念设计</title>
    <link href="/2022/07/07/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E5%8F%A4%E6%A0%91%E4%BE%A6%E5%AF%9F%E4%BF%9D%E6%8A%A4%E6%A6%82%E5%BF%B5%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/07/07/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E5%8F%A4%E6%A0%91%E4%BE%A6%E5%AF%9F%E4%BF%9D%E6%8A%A4%E6%A6%82%E5%BF%B5%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2022/07/07/jwd4Rx.png" alt="P1" /> <imgsrc="https://s1.ax1x.com/2022/07/07/jwdfiR.png" alt="P2" /> <imgsrc="https://s1.ax1x.com/2022/07/07/jwd5z6.png" alt="P3" /> <imgsrc="https://s1.ax1x.com/2022/07/07/jwdhJ1.png" alt="P4" /> <imgsrc="https://s1.ax1x.com/2022/07/07/jwdoQK.png" alt="P5" /> <imgsrc="https://s1.ax1x.com/2022/07/07/jwdqdH.png" alt="P6" /> <imgsrc="https://s1.ax1x.com/2022/07/07/jwdTsO.png" alt="P7" /> <imgsrc="https://s1.ax1x.com/2022/07/07/jwd7LD.png" alt="P8" /></p>]]></content>
    
    
    <categories>
      
      <category>作品集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>产品设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于人机工程学的大学床铺改进设计</title>
    <link href="/2022/07/07/%E5%9F%BA%E4%BA%8E%E4%BA%BA%E6%9C%BA%E5%B7%A5%E7%A8%8B%E5%AD%A6%E7%9A%84%E5%A4%A7%E5%AD%A6%E5%BA%8A%E9%93%BA%E6%94%B9%E8%BF%9B%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/07/07/%E5%9F%BA%E4%BA%8E%E4%BA%BA%E6%9C%BA%E5%B7%A5%E7%A8%8B%E5%AD%A6%E7%9A%84%E5%A4%A7%E5%AD%A6%E5%BA%8A%E9%93%BA%E6%94%B9%E8%BF%9B%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2022/07/07/jwGzbn.jpg" alt="展板" /><img src="https://s1.ax1x.com/2022/07/07/jwtetx.jpg" alt="渲染图" /></p>]]></content>
    
    
    <categories>
      
      <category>作品集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>产品设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建站小故事：阿里云、nginx、hexo和git</title>
    <link href="/2022/07/01/%E5%BB%BA%E7%AB%99%E5%B0%8F%E6%95%85%E4%BA%8B/"/>
    <url>/2022/07/01/%E5%BB%BA%E7%AB%99%E5%B0%8F%E6%95%85%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>一点点关于搭建个人网站的经验总结以及对原有教程的补充。</p>          </div><p>建站又是一阵折腾…… 参考教程 <ahref="https://blog.objectspace.cn/2019/08/15/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%A5%B6%E5%A6%88%E7%BA%A7%E6%95%99%E5%AD%A6/">从零搭建Hexo博客并部署阿里云服务器</a>常常苦口婆心地讲，要授人以渔，而这恰恰说明授人以渔是鲜有人做到。虽然是跟随这个教程，但是仍然遇上了不少问题，折腾了很久，最终解决了，以下作为记录。1. 建设逻辑： -用<code>hexo</code>作为网页框架引擎：用<code>hexo</code>的插件把网页代码部署到远程仓库，同时还可以备份到<code>github</code>-用<code>git</code>作为部署的工具：服务器上创建git账号，用于ssh登录和管理自定义的git仓库- <code>ngnix</code>作为web服务器 - 用阿里云服务器，系统我选择的是CentOS 8.2 2.即便自定义git仓库可以<code>push</code>，也仅仅只是压缩储存了提交的内容，如果需要把这个自定义git仓库里的源代码提取出来，还需要用到githook。在自定义的git仓库中应该有自动生成的<code>hooks</code>文件夹，其中的文件会按照文件名在特定的git命令执行时运行。我需要利用它来把本地上传的代码从仓库里部署到<code>ngnix</code>的网站根目录3. git hook用法: 编辑文件<code>blog.git/hooks/post-receive</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>git --work-tree=/home/www/website --git-dir=/home/git/blog.git checkout -f<br></code></pre></td></tr></table></figure>在<code>hooks</code>文件夹里的脚本会按照命名在特定时候触发运行。这里运行bash命令。<code>/home/www/website</code>是nginx的服务器目录。将<code>hexo</code>生成的<code>public</code>文件夹中的文件提交到此<code>blog.git</code>仓库后就会用<code>checkout</code>命令将文件同步到服务器的目录。上传部署就完成了4. ssh 密钥配置方法 ssh密钥简单来说就是有两点： -服务端必须在ssh服务设置中允许rst验证 -服务端被登录的账号下有<code>.ssh/authorized_keys</code>文件，将客户端的公钥拷贝进去即为安装密钥5. git账户（或者你用于远程部署git仓库的账户）必须要有对应的修改权限 6.hexo deploy插件配置方法关键是多个git仓库如何配置，如下，在本地的hexo博客设置文件<code>_config.yml</code>中配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br> <span class="hljs-attr">repo:</span><br><span class="hljs-string">&lt;repo</span> <span class="hljs-string">name</span> <span class="hljs-number">1</span><span class="hljs-string">&gt;:</span> <span class="hljs-string">https://github.com/&lt;who&gt;/&lt;repo&gt;,&lt;branch&gt;</span><br><span class="hljs-string">&lt;repo</span> <span class="hljs-string">name</span> <span class="hljs-number">2</span><span class="hljs-string">&gt;:</span> <span class="hljs-string">&lt;user&gt;@&lt;IP&gt;:/&lt;repo&gt;,&lt;branch&gt;</span><br><span class="hljs-attr">github:</span> <span class="hljs-string">https://github.com/TuoLiYinLi/BlogBackup.git,master</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure> &gt;最后的插曲。其实用github.io更简单不少，不仅解决了域名和备案的问题，而且成本是零，于是两周后我还是用回了github🤣</p>]]></content>
    
    
    <categories>
      
      <category>博客建设</category>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云服务器</tag>
      
      <tag>nginx</tag>
      
      <tag>hexo</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于类别(Categories)和标签(Tags)</title>
    <link href="/2022/06/30/%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%88%AB-Categories-%E5%92%8C%E6%A0%87%E7%AD%BE-Tags/"/>
    <url>/2022/06/30/%E5%85%B3%E4%BA%8E%E7%B1%BB%E5%88%AB-Categories-%E5%92%8C%E6%A0%87%E7%AD%BE-Tags/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>简述本博客的类别和标签是如何安排的。</p>          </div><h1 id="类别">类别</h1><p>决定了一篇文章的存在意义或目的，要仔细甄别</p><ul><li>【日常】关于体验和生活</li><li>【记录】收集和整理有用的资源和信息</li><li>【作品集】一些成品的展示和说明</li><li>【奇思妙想】一些新的思考和创意</li><li>【博客建设】关于此博客本身的建设和计划</li></ul><h1 id="标签">标签</h1><p>决定了一篇文章的相关话题，更加随意</p><ul><li>【游戏】主要是现代电子游戏，也可指更宏观意义上的游戏</li><li>【编程】与编程和代码相关内容</li><li>【美术】与美术、设计相关</li><li>【音乐】与音乐、编曲相关</li><li>等……</li></ul>]]></content>
    
    
    <categories>
      
      <category>博客建设</category>
      
    </categories>
    
    
    <tags>
      
      <tag>说明</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
